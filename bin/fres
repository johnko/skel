#!/bin/sh

MYUID=`id -u`

LAMEPKG=/var/ports/packages/All/lame-3.99.5_2.txz
LIBAACPLUSPKG=/var/ports/packages/All/libaacplus-2.0.2_8.txz
FFMPEGPKG=/var/ports/packages/All/ffmpeg-2.8_1,1.txz


if [ "x" == "x${REPOSRC}" ]; then
    REPOSRC=https://github.com/
fi

######################################################################
# Functions
######################################################################

install_ssh_auth_keys() {
    prefix=$1
    if [ -z "$prefix" ]; then
        prefix=$HOME
    fi
    install -d -m 700 ${prefix}/.ssh
    chmod 700 ${prefix}/.ssh
    cat >${prefix}/.ssh/authorized_keys <<EOF
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCVFa6ppe1CpTM6KIuSVV32d/fyz1E7XC6w6HkROSp7oLYC5PFeQRHtJQfNLW5JmCsEVogPJmUS/6e801Q8IKMajlTFpUzR9I+qGutmqBZNo6cmTLgTn3SVMueZb20GsYcBOhJRgsbgKbPdwQM/PKfnJYQzhzU6iOcrU+HCBQaTkMGT5HLsPO0FrVo3KnFdv1uGBAwxqyddztnuCrgxm/WbOy8fcHkReTOeLtGJsQu8fqWtBSzaAGlo2Rk/O4jEYX0uMV9Eq+yuZkHQP6tGNHDp4hPGEnnXhubhLYKmCH47Olq7CFqyUEeE74TmqZVNeY1dr7XunhsOO1RMLvYu4NYz chill
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDY+s7s+bs27WQV0gWZzwiRSZxALgnTBxtqb1ed39sZGzxcO0s1v9KoGtRaaisSIkMP+WSgzE1DIYBoW2FUGiD+lQXNlQSiIzw7oQCbR+EMuHO6+LW93hjix3c1rbrnhJfQST7Mwi/GfoFefxyW77/CO2Xkh2OkruNPUoBAXv/CvujF1ZXdL8D0tViXfpp/18tYx5feuLQMtq9Oi6A4N0021ICfAmUtGcpkQ8STldeVFxgBuVI3xtLmPqc8v45kB5EcNh9hvtaPznpKQCwQ6NTAv4NXRSVhApCKU1uY+TCNiHmnNwSnZ/PgKFmYlsh9vJr0CZbX6wbB++9Uwh3j51Xd dip
EOF
    chmod 600 ${prefix}/.ssh/authorized_keys
}

install_resolv_overwrite() {
    resolvfile=/etc/resolv.conf
    if sysctl security.jail.jailed | grep 0 >/dev/null 2>&1; then
        if [ -e /boot/../mfsroot ]; then
            resolvfile=/boot/resolv.conf.overwrite
        fi
    fi
    if [ ! -e ${resolvfile} ]; then
        cat >${resolvfile} <<EOF
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
    fi
}

install_hosts_overwrite() {
    if sysctl security.jail.jailed | grep 0 >/dev/null 2>&1; then
        if [ ! -e /boot/hosts.overwrite ]; then
            cat >/boot/hosts.overwrite <<EOF
::1 localhost localhost.my.domain
127.0.0.1 localhost localhost.my.domain
EOF
        fi
    fi
}

install_hosts_append() {
    if sysctl security.jail.jailed | grep 0 >/dev/null 2>&1; then
        if [ ! -e /boot/hosts.append ]; then
            echo >/boot/hosts.append
        fi
    fi
}

git_deploy() {
    repo=$1
    [ -z "$repo" ] && exit 1
    prefix=$2
    [ -z "$prefix" ] && prefix=$HOME
    if [ ! -d ~/git/${repo} ]; then
        git clone --depth 1 ${REPOSRC}johnko/${repo}.git ~/git/${repo}
    else
        cd ~/git/${repo}
        git pull | grep -v 'Already up-to-date.'
        cd -
    fi
    install -d -m 700 ${prefix}/bin
    if [ -d ~/git/${repo}/bin ]; then
        for i in ~/git/${repo}/bin/* ; do
            install -m 700 ${i} ${prefix}/bin/
        done
    fi
}

pkg_initial_install() {
    if [ ! -f /sbin/pkg-static ]; then
        [ -e /usr/local/sbin/pkg-static ] || pkg bootstrap
        [ -e /usr/local/sbin/pkg-static ] \
            && install -m 755 -o root -g wheel \
            /usr/local/sbin/pkg-static /sbin/pkg-static
    else
        diff /usr/local/sbin/pkg-static /sbin/pkg-static \
            || install -m 755 -o root -g wheel \
            /usr/local/sbin/pkg-static /sbin/pkg-static
    fi
    if [ -e $HOME/local/cshpkglist ]; then
        PKGLIST="`cat $HOME/local/cshpkglist | grep -v '^#' | tr ' ' '\n' | sort -u | grep -v '^\$'`"
    elif [ -e $HOME/perm/cshpkglist ]; then
        PKGLIST="`cat $HOME/perm/cshpkglist | grep -v '^#' | tr ' ' '\n' | sort -u | grep -v '^\$'`"
    fi
    if [ -e /boot/packages/ffmpeg-custom.txz ]; then
        tmppkglist="${PKGLIST}"
        PKGLIST="`echo ${tmppkglist} | sed 's;ffmpeg;;'`"
    fi
    if [ "update" = "$1" ]; then
        if sysctl security.jail.jailed | grep 0 >/dev/null 2>&1; then
            if [ -d /boot/packages ]; then
                if [ -d /boot/packages_old ]; then
                    rm -r /boot/packages_old
                fi
                mv /boot/packages /boot/packages_old
            fi
            install -d -m 755 /boot/packages
            if [ -f /usr/local/etc/pkg.conf ]; then
                cat /usr/local/etc/pkg.conf >/usr/local/etc/pkg.conf.bkp
            fi
            install -d -m 755 /usr/local/etc
            cat /usr/local/etc/pkg.conf.bkp | grep -v "PKG_CACHEDIR" >/usr/local/etc/pkg.conf
            echo "PKG_CACHEDIR = \"${mnt}/boot/packages\";" >>/usr/local/etc/pkg.conf
            if [ "x" != "x$PKGLIST" ]; then
                pkg-static fetch -y $PKGLIST
            fi
            if [ -f /usr/local/etc/pkg.conf.bkp ]; then
                cat /usr/local/etc/pkg.conf.bkp >/usr/local/etc/pkg.conf
                rm /usr/local/etc/pkg.conf.bkp
            else
                rm /usr/local/etc/pkg.conf
            fi
            if [ -e ${LAMEPKG} ]; then
                cp ${LAMEPKG} /boot/packages/
            fi
            if [ -e ${LIBAACPLUSPKG} ]; then
                cp ${LIBAACPLUSPKG} /boot/packages/
            fi
            if [ -e ${FFMPEGPKG} ]; then
                rm /boot/packages/ffmpeg*
                cp ${FFMPEGPKG} /boot/packages/
                cp ${FFMPEGPKG} /boot/packages/ffmpeg-custom.txz
            fi
        fi
    else
        if [ -e /boot/packages/ffmpeg-custom.txz ]; then
            tmppkglist="${PKGLIST}"
            PKGLIST="`echo ${tmppkglist} | sed 's;minidlna;;'`"
        fi
        if [ "x" != "x$PKGLIST" ]; then
            pkg-static install -y $PKGLIST
        fi
        if hostname | grep squid >/dev/null ;then
            pkg-static remove -y openssl
        else
            if [ -e /boot/packages/${LAMEPKG##*/} ]; then
                pkg-static add -f /boot/packages/${LAMEPKG##*/}
            fi
            if [ -e /boot/packages/${LIBAACPLUSPKG##*/} ]; then
                pkg-static add -f /boot/packages/${LIBAACPLUSPKG##*/}
            fi
            if [ -e /boot/packages/ffmpeg-custom.txz ]; then
                pkg-static add -f /boot/packages/ffmpeg-custom.txz
                if echo "${tmppkglist}" | grep minidlna > /dev/null 2> /dev/null ; then
                    pkg-static install -y minidlna
                fi
            fi
        fi
    fi
}

upgrade_to_ten_one() {
    freebsd-update upgrade -r 10.1-RELEASE
}

update_to_latest_patch() {
    freebsd-update fetch
    freebsd-update install
}

zfs_no_setuid() {
    ########## prevents a periodic job from searching for suid in large dataset
    zfs set setuid=off tank/largebackupdataset
}

mfsbsd_install() {
    ########## if using mfsbsd special edition
    mount_cd9660 /dev/cd0 /cdrom || mount -o ro /dev/da0a /cdrom
    zfsinstall -d $DISK -u /cdrom/10.1-RELEASE-amd64 -p $POOLNAME -s 2G -z 2G -c
}

fzg_mirror() {
    fzg -d ada0 -d ada1 -z 2g -m -D -r mirror -H `hostname-by-etc-hosts`
    fzg -d ada0 -d ada1 -z 2g -m    -r mirror -H `hostname-by-ptr-dns`
}

fzg_single() {
    fzg -d ada0         -z 2g -m -D -H `hostname-by-etc-hosts`
    fzg -d ada0         -z 2g -m    -H `hostname-by-ptr-dns`
}

fzg_attach_disk() {
    fzg -e ada0 -z 2g -p $POOLNAME -d ada1
}

fzg_update() {
    fzg -f -p $POOLNAME
}

fzg_usb() {
    fzg -d da0          -z 2g -m -n -p usb -H usb.local
}

fzg_data_mirror() {
    fzg -i -d ada0 -d ada1 -r mirror -p tank
}

fzg_data_lock() {
    fzg -l -p tank
}

fzg_data_unlock() {
    fzg -u -d ada0p5 -d ada1p5
}

ezjail_help() {
    # eza install -h file:///boot/../10.1-RELEASE
    # eza-update
    # eza create [-f flavour] testjail 'em0|192.168.0.211'
    # eza config -r norun testjail
    # eza start testjail
    # eza stop testjail
    # eza delete -w testjail
    ########## force archive
    # eza archive -f ripp
    ########## create based on archive
    # eza create -a /usr/jails/ezjail_archives/ripp-201412061053.13.tar.gz ripp 'bge0|192.168.0.248'
    ########## deploy
    # env FQDN=my.localdomain deploy as_jails good
}

add_urep_user() {
    if [ ! -d /usr/home/urep ]; then
        if cat /etc/passwd | grep urep >/dev/null 2>&1 ; then
            rmuser -yv urep
        fi
        echo "urep:1001::::::/usr/home/urep:/bin/csh:" | adduser -w no -f -
    fi
}

gitcluster_init() {
    first=$1
    repo=$2
    ssh    urep@$first   gtfc init  $first     $repo
}

gitcluster_add() {
    first=$1
    second=$2
    repo=$3
    ssh -A urep@$second  gtfc clone $first     $repo
    ssh    urep@$first   sh $repo/gitpullall.sh -f
}

btcluster_init() {
    ########## for testing bittorrent-for-clusters
    git clone https://github.com/jk-bt/bittorrent-for-clusters.git btcluster
    btcluster/setup.sh
    mkdir -p /mnt/tank/sync
    btcluster/bin/btinit.sh /mnt/tank/sync
}

things_to_sync() {
    cat <<EOF
########## Things that are similar globally
    /boot/loader.conf
    /etc/ssh/sshd_config
    /root/.ssh/authorized_keys
    /root/bin/
    /root/git/
    /root/perm/
    /usr/home/urep/
########## Things that are similar per DC across mfs types
    /boot/packages/
    /boot/resolv.conf.append
    /boot/resolv.conf.overwrite
    /boot/periodic.conf.append
    /boot/periodic.conf.overwrite
    /boot/sysctl.conf.append
    /boot/sysctl.conf.overwrite
    /boot/hosts.append
    /boot/hosts.overwrite
    /etc/hosts
########## Things that are unique per system/jail
    /boot/../mfsroot    #because of /boot is symlink to POOLNAME/boot
    /boot/*eli
    /boot/*key
    /boot/fstab.append
    /boot/loader.conf.local
    /boot/zfs/
    /etc/*db
    /etc/*passwd
    /etc/fstab
    /etc/group
    /etc/hostid
    /etc/mail
    /etc/pf/
    /etc/rc.conf.d/
    /etc/shells
    /etc/ssh/
    /root/.ssh/authorized_keys2
    /root/crontabbed/
    /root/local/
EOF
}

######################################################################
# Main
######################################################################

while getopts z:bh o; do
    case "$o" in
        b) UPDATEBOOKTPKG=1 ;;
    esac
done


install_ssh_auth_keys


if [ ! -d ~/perm ]; then
    # are you root?
    if [ "0" == "${MYUID}" ]; then
        NEWDATASET=`zfs list | grep -o '^[[:alnum:]]*/root/bin' | sed 's/bin/perm/'`
        if [ "x" != "x${NEWDATASET}" ]; then
            zfs create -o exec=off -o setuid=off ${NEWDATASET}
        fi
    fi
    if [ ! -d ~/perm ]; then
        install -d -m 700 ~/perm
    fi
fi
if [ ! -d ~/local ]; then
    # are you root?
    if [ "0" == "${MYUID}" ]; then
        NEWDATASET=`zfs list | grep -o '^[[:alnum:]]*/root/bin' | sed 's/bin/local/'`
        if [ "x" != "x${NEWDATASET}" ]; then
            zfs create -o exec=off -o setuid=off ${NEWDATASET}
        fi
    fi
    if [ ! -d ~/local ]; then
        install -d -m 700 ~/local
    fi
fi


if [ "0" == "${MYUID}" ]; then
    install_resolv_overwrite
    install_hosts_overwrite
    install_hosts_append
    add_urep_user
    test -e /etc/mail/aliases.db || newaliases
    if ! which git > /dev/null ; then
        pkg-static install -y git
    fi
fi

if ! which git > /dev/null ; then
    echo "ERROR: git not found"
    exit 1
else
    if [ ! -d ~/git ]; then
        # are you root?
        if [ "0" == "${MYUID}" ]; then
            NEWDATASET=`zfs list | grep -o '^[[:alnum:]]*/root/bin' | sed 's/bin/git/'`
            if [ "x" != "x${NEWDATASET}" ]; then
                zfs create -o setuid=off ${NEWDATASET}
            fi
        fi
        if [ ! -d ~/git ]; then
            install -d -m 700 ~/git
        fi
    fi
    git_deploy skel
    if [ ! -e ~/local/tmux.conf.status ]; then
        install -m 600 ~/git/skel/local/tmux.conf.status ~/local/tmux.conf.status
    fi
    if ls -A1 ~/git/skel/ | egrep -v '^\.git$' | grep '^\.' >/dev/null 2>&1 ; then
        for i in $(ls -A1 ~/git/skel/ | egrep -v '^\.git$' | grep '^\.') ; do
            install -m 644 ~/git/skel/${i} ${HOME}/
        done
        tar -c -f - -C ~/git/skel perm | tar -C ~/ -x -f -
        chmod 600 ~/perm/*
    fi
    if [ "0" = "`id -u`" ]; then
        pkg_initial_install
        [ "$UPDATEBOOKTPKG" ] && pkg_initial_install update
    fi
    REPOS="
    apache-config-freebsd
    btfc2
    btfs
    crontabbed
    delugefs
    deploy
    eza
    ffmpeg-tools
    freebsd-install-script
    freebsd-pf-script
    freebsd-sortconf
    freebsd-system-info
    github-backup
    gtfc
    hddid
    mount_iso
    netconn
    nginx-config-sites-enabled
    psnap
    pwgen
    rad
    randomword
    rsync-tools
    setproxy
    ssh-multi
    ssh-tools
    vmrc
    zfs-tools
    zsnapple
" # end of REPOS
    for i in ${REPOS} ; do
        git_deploy ${i}
    done
fi


if [ "0" = "`id -u`" ]; then
    if [ -d /boot/packages_cache ] && [ -d /var/cache/pkg ]; then
        rm -r /var/cache/pkg
    fi
    if sysctl security.jail.jailed | grep 0 >/dev/null 2>&1; then
        eza-setup
        which pf-sshinvaliduserip
        if service pf status | grep Enabled >/dev/null 2>&1; then
            which pf-table && pf-table save all
        fi
        which gdf && gdf
    else
        which nginx-config-sites-enabled && nginx-config-sites-enabled
    fi
fi
